import io.spring.gradle.dependencymanagement.dsl.DependencyManagementExtension
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.springframework.boot.gradle.tasks.bundling.BootJar

val snippetsDir by extra { file("build/generated-snippets") }

plugins {
    id "org.springframework.boot" version "2.5.3" apply true
    id "org.asciidoctor.convert" version "1.5.9.2" apply true
    id "org.barfuin.gradle.jacocolog" version "2.0.0"
    id "kotlin-kapt"
    id "jacoco"
    id "com.github.johnrengelman.processes" version "0.5.0"
    id "org.springdoc.openapi-gradle-plugin" version "1.3.0"
    kotlin "plugin.spring" version "1.4.10"
}

configure<DependencyManagementExtension> {
    imports {
        mavenBom(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)
        mavenBom("software.amazon.awssdk:bom:2.11.5")
    }

    openApi {
        outputDir.set(file("$buildDir/docs"))
        outputFileName.set("api-docs.json")
    }
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-webflux")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("org.springframework.boot:spring-boot-configuration-processor")
    implementation("org.springframework.cloud:spring-cloud-starter-gateway")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-reactor")
    implementation("com.google.guava:guava")
    implementation("io.arrow-kt:arrow-core")
    implementation("io.arrow-kt:arrow-syntax")
    implementation("io.vavr:vavr-kotlin")
    implementation("net.logstash.logback:logstash-logback-encoder")
    implementation("io.micrometer:micrometer-registry-signalfx")
    implementation("io.opentelemetry:opentelemetry-api")
    implementation("com.google.api-client:google-api-client")
    implementation("com.google.oauth-client:google-oauth-client-jetty")
    implementation("com.google.apis:google-api-services-calendar")
    implementation("software.amazon.awssdk:dynamodb")
    implementation("software.amazon.awssdk:cognitoidentityprovider")
    implementation("software.amazon.awssdk:sts")
    implementation("io.projectreactor.kotlin:reactor-kotlin-extensions")
    implementation("com.slack.api:slack-api-client")
    implementation("com.playtika.reactivefeign:feign-reactor-webclient")
    implementation("com.vivun:graphql-common")
    implementation("com.vivun:spring-webflux-common")
    implementation("com.auth0:java-jwt")
    implementation("org.springdoc:springdoc-openapi-webflux-ui:1.5.10")

    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude(group = "org.junit.vintage", module = "junit-vintage-engine")
    }
    testImplementation("io.projectreactor:reactor-test")
    testImplementation("org.spockframework:spock-core")
    testImplementation("org.spockframework:spock-spring")
    testImplementation("org.codehaus.groovy:groovy-json")
    testImplementation("org.springframework.restdocs:spring-restdocs-webtestclient")
    testImplementation("capital.scalable:spring-auto-restdocs-core")

    asciidoctor("org.springframework.restdocs:spring-restdocs-asciidoctor")
}

val compileKotlin: KotlinCompile by tasks
compileKotlin.kotlinOptions {
    jvmTarget = "1.8"
}

tasks {

    withType<Test> { useJUnitPlatform() }

    getByName<BootJar>("bootJar") {
        archiveName = "${rootProject.name}.jar"
    }

    springBoot {
        buildInfo {
            properties {
                artifact = "hero-aggregation-api"
                name = "Hero Aggregation API"
            }
        }
    }

    val testTask = withType<Test> {
        outputs.dir(snippetsDir)
    }

    withType<org.asciidoctor.gradle.AsciidoctorTask> {
        dependsOn(testTask)
        inputs.dir(snippetsDir)
        sourceDir("src/main/asciidoc")
        attributes["snippets"] = snippetsDir
        doLast {
            copy {
                from("build/asciidoc/html5")
                into("${rootProject.rootDir}/docs")
                include("index.html")
            }
        }
    }

    // Jacoco -- BEGIN
    val excludedFromCodeCoverage = listOf(
        "com/vivun/hero/aggregation/api/config/**",
        "com/vivun/hero/aggregation/api/web/filter/**",
        "com/vivun/hero/aggregation/api/web/dto/**",
        "com/vivun/hero/aggregation/api/web/exception/**",
        "com/vivun/hero/aggregation/api/web/constraints/**"
    )
    withType<JacocoReport> {
        afterEvaluate {
            classDirectories.setFrom(
                files(
                    classDirectories.files.map {
                        fileTree(it) {
                            exclude(excludedFromCodeCoverage)
                        }
                    }
                )
            )
        }
    }

    withType<JacocoCoverageVerification> {
        afterEvaluate {
            classDirectories.setFrom(
                files(
                    classDirectories.files.map {
                        fileTree(it) {
                            exclude(excludedFromCodeCoverage)
                        }
                    }
                )
            )
        }
        violationRules {
            rule {
                limit {
                    counter = "LINE"
                    minimum = BigDecimal(0.81)
                }
                limit {
                    counter = "BRANCH"
                    minimum = BigDecimal(0.63)
                }
            }
        }
    }

    getByName("check").dependsOn(getByName("jacocoTestCoverageVerification"))
    getByName("jacocoTestCoverageVerification").dependsOn(getByName("jacocoTestReport"))
    // Jacoco -- END
}
